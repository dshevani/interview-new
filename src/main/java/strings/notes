- Determine if string has unique characters

# Talk about Charset : Is it ASCII ? ASCII is 256 character set

-- 1 > Iterate over all characters and maintain a map O(N) & O(N)
-- 2 > Sort and Iterate to see if adjacent are same O(NlogN) & O(1)
-- 3 > Create Charset size array and iterate 
-- 4 > Reduce space using Bit Vector

Assuming string contains only 'a' to 'z' we can proceed as follows

* Keep a bit for each of the 26 characters. For this 32 bit integer is sufficient
* As you parse the string, keep setting bit corresponding to the current character
* If the bit is already set (found using & operation) - return false

	public static boolean hasUniqueCharacters(String inputString) {
		int checker = 0;
		for (int i = 0; i < inputString.length(); i++) {
			char currentCharacter = inputString.charAt(i);
			int asciiOffset = currentCharacter - 'a';
			int offset = (1 << asciiOffset);
			if ((checker & offset) > 0) { return false; }
			checker |= (1 << asciiOffset);
		}
		return true;
	}
	
* O(n) & O(1)

- Code to reverse a C style string

-- C style string have /0 at the end. Best is to use 2 pointers moving towards each other

- Remove duplicate characters in string without using additional buffer

-- Iterate. Maintain a map. Maintain a pointer that proceeds for every character that is seen first time
   Remove the characters after the pointer when we have iterated over entire string. This was using additional buffer
   
- Check if 2 strings are anagrams or not

-- Sort both and compare. O(NlogN) & O(N)
-- Maintain a hashmap O(N) & O(N)

- Replace all spaces with '%20'

-- Count spaces in first scan
-- Parse the string from end, and keep adding character or %20 as you wish
